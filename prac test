<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>

   <#
    idk why this doesnt work it should work 

    $product = ($var1 * $var2 * $var3 * $var4)
    write-output $product

    #>

 $ans = $var1 * $var2 * $var3 * $var4
    write-output $ans

}

function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
$num = 0
$highscore= 0
while( $num -ne -1 ) {
$num = read-host -Prompt "input a valid positive integer" 
if ($num -gt $highscore ){
$highscore = $num 
        }
      }
 Write-Output $highscore
}
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."	#>

$read = Get-Content $filename
    $read[$whichline]
}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
}
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
$sum = 0
    foreach ($element in $input ) {
    $sum += $element 
    return $sum 
}
}

function q7 {
	<# Return only those commands whose noun is process
 #>

get-command -Noun process

}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
}
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
            <# 
                broken
                                
            #>





}
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
}



<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>

   <#
    idk why this doesnt work it should work 

    $product = ($var1 * $var2 * $var3 * $var4)
    write-output $product

    #>

 $ans = $var1 * $var2 * $var3 * $var4
    write-output $ans

}

function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
$num = 0
$highscore= 0
while( $num -ne -1 ) {
$num = read-host -Prompt "input a valid positive integer" 
if ($num -gt $highscore ){
$highscore = $num 
        }
      }
 Write-Output $highscore
}
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."	#>

$read = Get-Content $filename
    $read[$whichline]

    <#
     OR 
    return (get-content -path $filename)[$whichline]
     or 
     get-content -path $filename | select -index $whichline

     #>
}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
}
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
$sum = 0
    foreach ($element in $input ) {
    $sum += $element 
    }
    return $sum 
}

function q7 {
	<# Return only those commands whose noun is process
 #>

get-command -Noun process

}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>

 return "powershell is $adjective"
     
}
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
            <# 
                if ($addr -as [ipaddress]) {
                return $true
                }
                else {
                    return $false
                }

                                
            #>


            return $addr -as [IpAddress] -as [bool]





}
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
}




